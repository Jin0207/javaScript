
JQuery의 반복문

$.each(배열,function(index,item){})

$("배열").each(function(index,item){})

*배열:
	데이터의 배열이 올 수도 있고
	노드(HTML 태그)의 배열이 올 수도 있다.

	-----------------------------------

jQuery 충돌방지
	$기호를 jQuery가 아닌 다른 프레임워크에서도 사용할 때,
	충돌을 방지하기 위하여 다음과 같이 $ 대신에 다른 식별자로 바꾸어 사용할 수 있다.
	
	$.noConflict();
	const J = jQuery;
	
	J(function() {
		J("h1").addClass("high_light");
	});	
	
	--------------------------------------
	
	<문서 객체 탐색>
		대상이 되는 노드 찾는 방법
		
		filter()
			문서 객체를 필터링
		
	-------------------------
	
	메서드 체이닝
		여러개의 함수를 계속 연결하여 호출하는 것
			$("h3").css("background","orange").filter(":even").css("color","blue").end().filter(":odd").css("color","red");
		
		end()
		==> 메서드 체이닝에서 선택한 범위를 한 단계 앞으로 돌려놓는 함수
		
	
	--
	
	add() 함수
		메서드 체이닝에서 선택의 범위를 추가하고자 할 때 사용
			
			
	--
	서로 다른 컴퓨터끼리 데이터를 주고받는 형식
	(자바스크립트에서 Ajax 통신으로 서버의 데이터를 요구하면 서버가 응답하는 형식)
	
	csv(comma seperator value):
		값을 , 로 분리해서 데이터를 표현하는 방식
		
		ex)홍길동,20,서울
		
	xml(Extensable Markup Language):
		그 데이터가 무엇인지 태그(유의미한 이름)로 표시하는 방식
		규칙: 열/닫 형식으로 쌍을 이룬다
				xml의 태그는 열었으면 반드시 닫아주어야한다.
				포함관계가 일치해야한다. (여는 태그 닫는태그의 순서가 맞아야)
				반드시 루트노드는 한 개여야한다 (<members>)
				이러한 규칙을 지키는 xml을 wellformed 하다고 한다.
		ex>
		<members>
			<member>
				<name> 홍길동 </name>
				<age>20</age>
				<addr>서울</addr>
			</member>
			<member>
				<name> 홍길동 </name>
				<age>20</age>
				<addr>서울</addr>
			</member>
		</members>
		
	json:	
		JavaScript Object Notation
		자바스크립트 객체 형태로 데이터를 표현하는 방식
		
		[
			{
				name: "홍길동",
				age: 20,
				add: "서울"
			},
			{
				name: "홍길동",
				age: 20,
				add: "서울"
			},
		]
	
	--
	contentType="text/plain";
		
		위와같이 서버가 text/plain으로 응답하면
		자바스크립트에서 받아오는 데이터는 문자열이기 때문에
		parseXML로 변환한 후에 처리해야한다.
		
		xml 형태를 띄는 문자열을 xml객체로 만들기 위하여 parseXML함수를 이용
		let xmlDoc = $.parseXML(xml);
		
		
	contentType="application/xml;
	
		서버의 응답방식이 application/xml이면 자바스크립트에서 Ajax통신으로 받아온 데이터가 xml객체이기 때문에
		parseXML을 따로 할 필요가 없다.
		
	---
	
	노드의 속성을 설정하고 읽어오기
	
	attr("속성명", "값")
		속성 설정
	
	attr("속성명")
		해당 속성값을 읽어오기
		
	--
	
	$(선택자).html();
	$(선택자).text();
	$(선택자).val();
	$(선택자).css("속성명");
	$(선택자).attr("속성명");		
	
	위의 함수들은 모두 값을 읽어오는 용도로 사용
	만약 선택자가 "배열"이라면
	맨 첫번째 요소의 값을 읽어옴
	
	----------------------------------------------------------
	
	attr 함수의 다양한 형태
	
	1.$(선택자).attr("속성명", "값");
	
	만약, 여러개의 속성을 설정해야한다면
	
	attr(속성1, 값);	
	attr(속성2, 값);	
	attr(속성3, 값);	
		
	속성의 수만큼 attr함수를 호출하는 것은 번거로울 수 있다.
	그래서, 다음과 같이 객체를 표현하여 한꺼번에 여러개의 속성값을 설정할 수 있다.
	
	2. 객체 형태
	$(선택자).attr({
		속성1: 값,
		속성2: 값,
		속성3: 값
	})
	
	1번과 2번 방식은 선택자가 배열일 때, 모두 동일하게 속성이 설정됨
	만약, 선택자가 배열일 때
	각각 다른 속성값을 설정하려면 attr함수에 속성값을 반환하는 콜백함수를 사용할 수 있다.
	
	3. 콜백함수
	$(선택자).attr(속성명, function(){ ~~~~ return 설정할 값     });		
			
	--
	
	text함수와 html함수
		모두 태그에 나타내는 글자를 설정하거나 읽어올 때 사용
		
		$(선택자).text(문자열);
		$(선택자).html(문자열);
			==> 글자를 설정
		
		$(선택자).text();
		$(선택자).html();
			==> 글자를 읽어옴
		
	--
	
	text와 html의 차이
		글자를 설정할 때,
		문자열이 html 태그를 표현하는 문자열일 때
		html은 html의 결과를 나타내고
		text는 글자로 처리함
		
	문자열을 읽어올 때,
		선택자가 배열이라면
		html은 맨 첫번째 요소의 글자를 읽어오고,
		text는 모든 요소의 문자열을 연결하여 하나의 문자열로 반환
		
	--
	
	html 태그 삭제
	
	remove 함수
		객체 자신을 삭제하는 함수
		
	empty함수
		객체 안에 포함된 후손 태그들을 모두 삭제하는 함수
		
		
			
			